    This file is a merged representation of the entire codebase, combined into a single document by Repomix.

    <file_summary>
    This section contains a summary of this file.

    <purpose>
    This file contains a packed representation of the entire repository's contents.
    It is designed to be easily consumable by AI systems for analysis, code review,
    or other automated processes.
    </purpose>

    <file_format>
    The content is organized as follows:
    1. This summary section
    2. Repository information
    3. Directory structure
    4. Repository files (if enabled)
    4. Repository files, each consisting of:
      - File path as an attribute
      - Full contents of the file
    </file_format>

    <usage_guidelines>
    - This file should be treated as read-only. Any changes should be made to the
      original repository files, not this packed version.
    - When processing this file, use the file path to distinguish
      between different files in the repository.
    - Be aware that this file may contain sensitive information. Handle it with
      the same level of security as you would the original repository.
    </usage_guidelines>

    <notes>
    - Some files may have been excluded based on .gitignore rules and Repomix's configuration
    - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
    - Files matching patterns in .gitignore are excluded
    - Files matching default ignore patterns are excluded
    - Files are sorted by Git change count (files with more changes are at the bottom)
    </notes>

    <additional_info>

    </additional_info>

    </file_summary>

    <directory_structure>
    public/
      data/
        2024BetterLife.csv
        world.geojson
      2024BetterLife.csv
    src/
      types/
        d3-shim.d.ts
      dashboard.ts
      main.ts
      map.ts
      scatter.ts
      style.css
      vite-env.d.ts
    .gitignore
    dashboard.html
    index.html
    package.json
    README.md
    tsconfig.json
    </directory_structure>

    <files>
    This section contains the contents of the repository's files.

    <file path="public/data/2024BetterLife.csv">
    Country,Flag,GDP per capita (USD),  Dwellings without basic facilities,  Housing expenditure,  Rooms per person,  Household net adjusted disposable income,  Household net wealth,  Labour market insecurity,  Employment rate,  Long-term unemployment rate,  Personal earnings,  Quality of support network,  Educational attainment,  Student skills,  Years in education,  Air pollution,  Water quality,  Stakeholder engagement for developing regulations,  Voter turnout,  Life expectancy,  Self-reported health,  Feeling safe walking alone at night,  Homicide rate,  Employees working very long hours,  Time devoted to leisure and personal care,  Life satisfaction,Population
    Australia,🇦🇺,66589,1.1,19.4,2.3,37433,528768,3.1,73,1,55206,93,84,499,20,6.7,92,2.7,92,83,85,67,0.9,12.5,14.36,7.1,26660000
    Austria,🇦🇹,59225,0.8,20.8,1.6,37001,309637,2.3,72,1.3,53132,92,86,491,17,12.2,92,1.3,76,82,71,86,0.5,5.3,14.51,7.2,9132000
    Belgium,🇧🇪,55536,0.7,20,2.1,34884,447607,2.4,65,2.3,54327,90,80,500,19,12.8,79,2,88,82.1,74,56,1.1,4.3,15.52,6.8,11790000
    Canada,🇨🇦,54866,0.2,22.9,2.6,34421,478240,3.8,70,0.5,55342,93,92,517,17,7.1,90,2.9,68,82.1,89,78,1.2,3.3,14.57,7,40100000
    Chile,🇨🇱,16616,9.4,18.4,1.9,135787,135787,7,56,,26729,88,67,438,17,23.4,62,1.3,47,80.6,60,41,2.4,7.7,,6.2,19660000
    Colombia,🇨🇴,7327,12.3,,1,,,,58,1.1,,80,59,406,14,22.6,82,1.4,53,76.7,80,50,23.1,23.7,,5.7,52320000
    Costa Rica,🇨🇷,18031,2.3,17,1.2,16517,,,55,1.5,,82,43,415,,17.5,87,1.8,66,80.5,73,47,10,22,,6.3,5106000
    Czechia,🇨🇿,29801,0.5,23.4,1.5,26664,,2.3,74,0.6,29885,96,94,495,18,17,89,1.6,62,79.3,62,77,0.7,4.5,,6.9,10860000
    Denmark,🇩🇰,68898,0.5,23.3,1.9,33774,149864,4.5,74,0.9,58430,95,82,501,19,10,93,2,85,81.5,70,85,0.5,1.1,,7.5,5947000
    Estonia,🇪🇪,31855,5.7,17,1.7,23784,188627,5.4,74,1.2,30720,95,91,526,18,5.9,86,2.7,64,78.8,57,79,1.9,2.2,14.98,6.5,1370000
    Finland,🇫🇮,55127,0.4,23.1,1.9,33471,230032,2.2,72,1.2,46230,96,91,516,20,5.5,97,2.2,69,82.1,68,88,1.2,3.6,15.17,7.9,5584000
    France,🇫🇷,47359,0.5,20.7,1.8,34375,298639,3.1,65,2.9,45581,94,81,494,17,11.4,78,2.1,75,82.9,67,74,0.4,7.7,16.2,6.7,68290000
    Germany,🇩🇪,54291,0.1,20,1.8,38971,304317,1.4,77,1.2,53745,90,86,500,18,12,91,1.8,76,81.4,66,76,0.4,3.9,15.62,7.3,83280000
    Greece,🇬🇷,23966,0.4,21.8,1.2,20791,148323,21.7,56,10.8,27207,78,76,453,19,14.5,67,1.8,58,81.7,79,69,1,4.5,15.03,5.8,10410000
    Hungary,🇭🇺,23319,3.5,19.9,1.4,21026,150296,3.8,70,1.2,25409,94,86,479,16,16.7,81,1.2,70,76.4,58,74,0.9,1.5,15.08,6,9592000
    Iceland,🇮🇸,84594,0,20.5,1.6,,,1,78,0.7,67488,98,76,481,19,6.4,97,2.1,81,83.2,77,85,0.3,11.7,,7.6,393349
    Ireland,🇮🇪,106059,0.2,20.6,2.1,29488,370341,2.6,68,1.2,49474,96,85,505,18,7.8,80,1.3,63,82.8,84,76,0.5,4.7,14.54,7,5308000
    Israel,🇮🇱,53372,3.9,20.5,1.2,,,4.6,67,0.2,39322,95,88,465,16,19.7,77,2.5,67,82.9,74,80,1.5,14.1,,7.2,9757000
    Italy,🇮🇹,39580,0.6,22.5,1.4,29431,295020,8.6,58,4.8,37769,89,63,477,17,15.9,77,2.5,73,83.6,73,73,0.5,3.3,16.47,6.5,58990000
    Japan,🇯🇵,33138,6.4,21.8,1.9,28872,294735,2.7,77,0.8,38515,89,,520,16,13.7,87,1.4,53,84.4,37,77,0.2,,14.1,6.1,124500000
    Korea,🇰🇷,34165,2.5,14.7,1.5,24590,362340,2.9,66,0,41960,80,89,520,17,27.3,82,2.9,77,83.3,34,82,0.8,,14.83,5.8,51710000
    Latvia,🇱🇻,24194,11.2,20.8,1.2,19783,79245,6.3,72,2.2,29876,92,89,487,18,12.7,83,2.2,55,75.5,47,72,3.7,1.6,,6.2,1877000
    Lithuania,🇱🇹,28407,11.8,18.4,1.5,26976,182039,,72,2.5,31811,89,94,480,18,10.5,83,2.4,57,76.4,46,62,2.5,1,,6.4,2872000
    Luxembourg,🇱🇺,131384,0.1,20.7,2,44773,941162,2.2,67,1.7,65854,91,74,477,15,10,85,1.7,90,82.7,72,87,0.2,2.8,,7.4,666430
    Mexico,🇲🇽,15249,25.9,17.8,1.1,16269,,4,59,0.1,16230,77,42,416,15,20.3,75,3.2,63,75.1,66,42,26.8,27,,6,129700000
    Netherlands,🇳🇱,63750,0.1,19.6,2,34984,248599,2.5,78,0.9,58828,94,81,502,19,12.2,91,2.6,79,82.2,75,83,0.6,0.3,15.45,7.5,17880000
    New Zealand,🇳🇿,48531,0.1,25,2.4,39024,514162,4.5,77,0.4,45269,95,81,503,18,6,85,2.5,82,82.1,86,66,1.3,14,14.87,7.3,5223000
    Norway,🇳🇴,94660,0,17.7,2.1,39144,268358,2.8,75,0.9,55780,96,82,497,18,6.7,98,2.2,78,83,75,93,0.6,1.4,15.67,7.3,5520000
    Poland,🇵🇱,23014,2.3,21.2,1.1,23675,233221,5,69,0.6,32527,94,93,513,18,22.8,82,2.6,68,78,60,71,0.5,4.2,14.68,6.1,36690000
    Portugal,🇵🇹,28969,0.9,19.6,1.7,24877,255303,8.1,69,2.3,28410,87,55,492,17,8.3,89,1.5,49,81.8,50,83,0.7,5.6,,5.8,10580000
    Slovak Republic,🇸🇰,25935,1.5,27.4,1.1,21149,171425,8.8,68,3,23619,95,92,469,16,18.5,81,3,66,77.8,65,76,0.8,4.2,,6.5,5427000
    Slovenia,🇸🇮,34026,0.2,18.2,1.6,25250,233286,5.9,71,1.9,41445,95,90,504,18,17,93,2.5,53,81.6,67,91,0.4,5.6,,6.5,2120000
    Spain,🇪🇸,34045,0.3,21.7,1.9,27155,366534,15.8,62,5,37922,93,63,,18,10,76,1.8,72,83.9,75,80,0.7,2.5,15.75,6.5,48350000
    Sweden,🇸🇪,58529,0,20.1,1.7,33730,,4.4,75,1,47020,94,84,503,20,5.8,97,2,87,83.2,76,79,1.1,0.9,,7.3,10540000
    Switzerland,🇨🇭,105669,0,21.4,1.9,39697,,,80,1.7,64824,94,89,498,17,10.1,96,2.3,45,84,81,86,0.3,0.4,,7.5,8888000
    Türkiye,🇹🇷,12765,4.9,18.9,1,,,13,48,3.3,,85,42,462,19,27.1,62,1.5,86,78.6,67,59,1,25,14.61,4.9,85330000
    United Kingdom,🇬🇧,51075,0.5,23.2,2,33049,524422,3.3,75,0.9,47147,93,82,503,17,10.1,82,3.1,68,81.3,73,78,0.2,10.8,14.94,6.8,68350000
    United States,🇺🇸,85373,0.1,18.3,2.4,51147,684500,4.2,67,0.5,69392,94,92,495,17,7.7,88,3.1,65,78.9,88,78,6,10.4,14.57,7,340100000
    </file>

    <file path="public/2024BetterLife.csv">
    Country,Flag,GDP per capita (USD),  Dwellings without basic facilities,  Housing expenditure,  Rooms per person,  Household net adjusted disposable income,  Household net wealth,  Labour market insecurity,  Employment rate,  Long-term unemployment rate,  Personal earnings,  Quality of support network,  Educational attainment,  Student skills,  Years in education,  Air pollution,  Water quality,  Stakeholder engagement for developing regulations,  Voter turnout,  Life expectancy,  Self-reported health,  Feeling safe walking alone at night,  Homicide rate,  Employees working very long hours,  Time devoted to leisure and personal care,  Life satisfaction,Population
    Australia,🇦🇺,66589,1.1,19.4,2.3,37433,528768,3.1,73,1,55206,93,84,499,20,6.7,92,2.7,92,83,85,67,0.9,12.5,14.36,7.1,26660000
    Austria,🇦🇹,59225,0.8,20.8,1.6,37001,309637,2.3,72,1.3,53132,92,86,491,17,12.2,92,1.3,76,82,71,86,0.5,5.3,14.51,7.2,9132000
    Belgium,🇧🇪,55536,0.7,20,2.1,34884,447607,2.4,65,2.3,54327,90,80,500,19,12.8,79,2,88,82.1,74,56,1.1,4.3,15.52,6.8,11790000
    Canada,🇨🇦,54866,0.2,22.9,2.6,34421,478240,3.8,70,0.5,55342,93,92,517,17,7.1,90,2.9,68,82.1,89,78,1.2,3.3,14.57,7,40100000
    Chile,🇨🇱,16616,9.4,18.4,1.9,135787,135787,7,56,,26729,88,67,438,17,23.4,62,1.3,47,80.6,60,41,2.4,7.7,,6.2,19660000
    Colombia,🇨🇴,7327,12.3,,1,,,,58,1.1,,80,59,406,14,22.6,82,1.4,53,76.7,80,50,23.1,23.7,,5.7,52320000
    Costa Rica,🇨🇷,18031,2.3,17,1.2,16517,,,55,1.5,,82,43,415,,17.5,87,1.8,66,80.5,73,47,10,22,,6.3,5106000
    Czechia,🇨🇿,29801,0.5,23.4,1.5,26664,,2.3,74,0.6,29885,96,94,495,18,17,89,1.6,62,79.3,62,77,0.7,4.5,,6.9,10860000
    Denmark,🇩🇰,68898,0.5,23.3,1.9,33774,149864,4.5,74,0.9,58430,95,82,501,19,10,93,2,85,81.5,70,85,0.5,1.1,,7.5,5947000
    Estonia,🇪🇪,31855,5.7,17,1.7,23784,188627,5.4,74,1.2,30720,95,91,526,18,5.9,86,2.7,64,78.8,57,79,1.9,2.2,14.98,6.5,1370000
    Finland,🇫🇮,55127,0.4,23.1,1.9,33471,230032,2.2,72,1.2,46230,96,91,516,20,5.5,97,2.2,69,82.1,68,88,1.2,3.6,15.17,7.9,5584000
    France,🇫🇷,47359,0.5,20.7,1.8,34375,298639,3.1,65,2.9,45581,94,81,494,17,11.4,78,2.1,75,82.9,67,74,0.4,7.7,16.2,6.7,68290000
    Germany,🇩🇪,54291,0.1,20,1.8,38971,304317,1.4,77,1.2,53745,90,86,500,18,12,91,1.8,76,81.4,66,76,0.4,3.9,15.62,7.3,83280000
    Greece,🇬🇷,23966,0.4,21.8,1.2,20791,148323,21.7,56,10.8,27207,78,76,453,19,14.5,67,1.8,58,81.7,79,69,1,4.5,15.03,5.8,10410000
    Hungary,🇭🇺,23319,3.5,19.9,1.4,21026,150296,3.8,70,1.2,25409,94,86,479,16,16.7,81,1.2,70,76.4,58,74,0.9,1.5,15.08,6,9592000
    Iceland,🇮🇸,84594,0,20.5,1.6,,,1,78,0.7,67488,98,76,481,19,6.4,97,2.1,81,83.2,77,85,0.3,11.7,,7.6,393349
    Ireland,🇮🇪,106059,0.2,20.6,2.1,29488,370341,2.6,68,1.2,49474,96,85,505,18,7.8,80,1.3,63,82.8,84,76,0.5,4.7,14.54,7,5308000
    Israel,🇮🇱,53372,3.9,20.5,1.2,,,4.6,67,0.2,39322,95,88,465,16,19.7,77,2.5,67,82.9,74,80,1.5,14.1,,7.2,9757000
    Italy,🇮🇹,39580,0.6,22.5,1.4,29431,295020,8.6,58,4.8,37769,89,63,477,17,15.9,77,2.5,73,83.6,73,73,0.5,3.3,16.47,6.5,58990000
    Japan,🇯🇵,33138,6.4,21.8,1.9,28872,294735,2.7,77,0.8,38515,89,,520,16,13.7,87,1.4,53,84.4,37,77,0.2,,14.1,6.1,124500000
    Korea,🇰🇷,34165,2.5,14.7,1.5,24590,362340,2.9,66,0,41960,80,89,520,17,27.3,82,2.9,77,83.3,34,82,0.8,,14.83,5.8,51710000
    Latvia,🇱🇻,24194,11.2,20.8,1.2,19783,79245,6.3,72,2.2,29876,92,89,487,18,12.7,83,2.2,55,75.5,47,72,3.7,1.6,,6.2,1877000
    Lithuania,🇱🇹,28407,11.8,18.4,1.5,26976,182039,,72,2.5,31811,89,94,480,18,10.5,83,2.4,57,76.4,46,62,2.5,1,,6.4,2872000
    Luxembourg,🇱🇺,131384,0.1,20.7,2,44773,941162,2.2,67,1.7,65854,91,74,477,15,10,85,1.7,90,82.7,72,87,0.2,2.8,,7.4,666430
    Mexico,🇲🇽,15249,25.9,17.8,1.1,16269,,4,59,0.1,16230,77,42,416,15,20.3,75,3.2,63,75.1,66,42,26.8,27,,6,129700000
    Netherlands,🇳🇱,63750,0.1,19.6,2,34984,248599,2.5,78,0.9,58828,94,81,502,19,12.2,91,2.6,79,82.2,75,83,0.6,0.3,15.45,7.5,17880000
    New Zealand,🇳🇿,48531,0.1,25,2.4,39024,514162,4.5,77,0.4,45269,95,81,503,18,6,85,2.5,82,82.1,86,66,1.3,14,14.87,7.3,5223000
    Norway,🇳🇴,94660,0,17.7,2.1,39144,268358,2.8,75,0.9,55780,96,82,497,18,6.7,98,2.2,78,83,75,93,0.6,1.4,15.67,7.3,5520000
    Poland,🇵🇱,23014,2.3,21.2,1.1,23675,233221,5,69,0.6,32527,94,93,513,18,22.8,82,2.6,68,78,60,71,0.5,4.2,14.68,6.1,36690000
    Portugal,🇵🇹,28969,0.9,19.6,1.7,24877,255303,8.1,69,2.3,28410,87,55,492,17,8.3,89,1.5,49,81.8,50,83,0.7,5.6,,5.8,10580000
    Slovak Republic,🇸🇰,25935,1.5,27.4,1.1,21149,171425,8.8,68,3,23619,95,92,469,16,18.5,81,3,66,77.8,65,76,0.8,4.2,,6.5,5427000
    Slovenia,🇸🇮,34026,0.2,18.2,1.6,25250,233286,5.9,71,1.9,41445,95,90,504,18,17,93,2.5,53,81.6,67,91,0.4,5.6,,6.5,2120000
    Spain,🇪🇸,34045,0.3,21.7,1.9,27155,366534,15.8,62,5,37922,93,63,,18,10,76,1.8,72,83.9,75,80,0.7,2.5,15.75,6.5,48350000
    Sweden,🇸🇪,58529,0,20.1,1.7,33730,,4.4,75,1,47020,94,84,503,20,5.8,97,2,87,83.2,76,79,1.1,0.9,,7.3,10540000
    Switzerland,🇨🇭,105669,0,21.4,1.9,39697,,,80,1.7,64824,94,89,498,17,10.1,96,2.3,45,84,81,86,0.3,0.4,,7.5,8888000
    Türkiye,🇹🇷,12765,4.9,18.9,1,,,13,48,3.3,,85,42,462,19,27.1,62,1.5,86,78.6,67,59,1,25,14.61,4.9,85330000
    United Kingdom,🇬🇧,51075,0.5,23.2,2,33049,524422,3.3,75,0.9,47147,93,82,503,17,10.1,82,3.1,68,81.3,73,78,0.2,10.8,14.94,6.8,68350000
    United States,🇺🇸,85373,0.1,18.3,2.4,51147,684500,4.2,67,0.5,69392,94,92,495,17,7.7,88,3.1,65,78.9,88,78,6,10.4,14.57,7,340100000
    </file>

    <file path="src/types/d3-shim.d.ts">
    /// <reference types="geojson" />

    // Give TS at least an 'any' module for d3 so imports work
    declare module "d3";
    </file>

    <file path="src/vite-env.d.ts">
    /// <reference types="vite/client" />
    </file>

    <file path=".gitignore">
    # LogsThis file is a merged representation of the entire codebase, combined into a single document by Repomix.

      <file_summary>
        This section contains a summary of this file.

        <purpose>
          This file contains a packed representation of the entire repository's contents.
          It is designed to be easily consumable by AI systems for analysis, code review,
          or other automated processes.
        </purpose>

        <file_format>
          The content is organized as follows:
          1. This summary section
          2. Repository information
          3. Directory structure
          4. Repository files (if enabled)
          4. Repository files, each consisting of:
          - File path as an attribute
          - Full contents of the file
        </file_format>

        <usage_guidelines>
          - This file should be treated as read-only. Any changes should be made to the
          original repository files, not this packed version.
          - When processing this file, use the file path to distinguish
          between different files in the repository.
          - Be aware that this file may contain sensitive information. Handle it with
          the same level of security as you would the original repository.
        </usage_guidelines>

        <notes>
          - Some files may have been excluded based on .gitignore rules and Repomix's configuration
          - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
          - Files matching patterns in .gitignore are excluded
          - Files matching default ignore patterns are excluded
          - Files are sorted by Git change count (files with more changes are at the bottom)
        </notes>

        <additional_info>

        </additional_info>

      </file_summary>

      <directory_structure>
        public/
        data/
        2024BetterLife.csv
        world.geojson
        2024BetterLife.csv
        src/
        types/
        d3-shim.d.ts
        dashboard.ts
        main.ts
        map.ts
        scatter.ts
        style.css
        vite-env.d.ts
        .gitignore
        dashboard.html
        index.html
        package.json
        README.md
        tsconfig.json
      </directory_structure>

      <files>
        This section contains the contents of the repository's files.

        <file path="public/data/2024BetterLife.csv">
          Country,Flag,GDP per capita (USD),  Dwellings without basic facilities,  Housing expenditure,  Rooms per person,  Household net adjusted disposable income,  Household net wealth,  Labour market insecurity,  Employment rate,  Long-term unemployment rate,  Personal earnings,  Quality of support network,  Educational attainment,  Student skills,  Years in education,  Air pollution,  Water quality,  Stakeholder engagement for developing regulations,  Voter turnout,  Life expectancy,  Self-reported health,  Feeling safe walking alone at night,  Homicide rate,  Employees working very long hours,  Time devoted to leisure and personal care,  Life satisfaction,Population
          Australia,🇦🇺,66589,1.1,19.4,2.3,37433,528768,3.1,73,1,55206,93,84,499,20,6.7,92,2.7,92,83,85,67,0.9,12.5,14.36,7.1,26660000
          Austria,🇦🇹,59225,0.8,20.8,1.6,37001,309637,2.3,72,1.3,53132,92,86,491,17,12.2,92,1.3,76,82,71,86,0.5,5.3,14.51,7.2,9132000
          Belgium,🇧🇪,55536,0.7,20,2.1,34884,447607,2.4,65,2.3,54327,90,80,500,19,12.8,79,2,88,82.1,74,56,1.1,4.3,15.52,6.8,11790000
          Canada,🇨🇦,54866,0.2,22.9,2.6,34421,478240,3.8,70,0.5,55342,93,92,517,17,7.1,90,2.9,68,82.1,89,78,1.2,3.3,14.57,7,40100000
          Chile,🇨🇱,16616,9.4,18.4,1.9,135787,135787,7,56,,26729,88,67,438,17,23.4,62,1.3,47,80.6,60,41,2.4,7.7,,6.2,19660000
          Colombia,🇨🇴,7327,12.3,,1,,,,58,1.1,,80,59,406,14,22.6,82,1.4,53,76.7,80,50,23.1,23.7,,5.7,52320000
          Costa Rica,🇨🇷,18031,2.3,17,1.2,16517,,,55,1.5,,82,43,415,,17.5,87,1.8,66,80.5,73,47,10,22,,6.3,5106000
          Czechia,🇨🇿,29801,0.5,23.4,1.5,26664,,2.3,74,0.6,29885,96,94,495,18,17,89,1.6,62,79.3,62,77,0.7,4.5,,6.9,10860000
          Denmark,🇩🇰,68898,0.5,23.3,1.9,33774,149864,4.5,74,0.9,58430,95,82,501,19,10,93,2,85,81.5,70,85,0.5,1.1,,7.5,5947000
          Estonia,🇪🇪,31855,5.7,17,1.7,23784,188627,5.4,74,1.2,30720,95,91,526,18,5.9,86,2.7,64,78.8,57,79,1.9,2.2,14.98,6.5,1370000
          Finland,🇫🇮,55127,0.4,23.1,1.9,33471,230032,2.2,72,1.2,46230,96,91,516,20,5.5,97,2.2,69,82.1,68,88,1.2,3.6,15.17,7.9,5584000
          France,🇫🇷,47359,0.5,20.7,1.8,34375,298639,3.1,65,2.9,45581,94,81,494,17,11.4,78,2.1,75,82.9,67,74,0.4,7.7,16.2,6.7,68290000
          Germany,🇩🇪,54291,0.1,20,1.8,38971,304317,1.4,77,1.2,53745,90,86,500,18,12,91,1.8,76,81.4,66,76,0.4,3.9,15.62,7.3,83280000
          Greece,🇬🇷,23966,0.4,21.8,1.2,20791,148323,21.7,56,10.8,27207,78,76,453,19,14.5,67,1.8,58,81.7,79,69,1,4.5,15.03,5.8,10410000
          Hungary,🇭🇺,23319,3.5,19.9,1.4,21026,150296,3.8,70,1.2,25409,94,86,479,16,16.7,81,1.2,70,76.4,58,74,0.9,1.5,15.08,6,9592000
          Iceland,🇮🇸,84594,0,20.5,1.6,,,1,78,0.7,67488,98,76,481,19,6.4,97,2.1,81,83.2,77,85,0.3,11.7,,7.6,393349
          Ireland,🇮🇪,106059,0.2,20.6,2.1,29488,370341,2.6,68,1.2,49474,96,85,505,18,7.8,80,1.3,63,82.8,84,76,0.5,4.7,14.54,7,5308000
          Israel,🇮🇱,53372,3.9,20.5,1.2,,,4.6,67,0.2,39322,95,88,465,16,19.7,77,2.5,67,82.9,74,80,1.5,14.1,,7.2,9757000
          Italy,🇮🇹,39580,0.6,22.5,1.4,29431,295020,8.6,58,4.8,37769,89,63,477,17,15.9,77,2.5,73,83.6,73,73,0.5,3.3,16.47,6.5,58990000
          Japan,🇯🇵,33138,6.4,21.8,1.9,28872,294735,2.7,77,0.8,38515,89,,520,16,13.7,87,1.4,53,84.4,37,77,0.2,,14.1,6.1,124500000
          Korea,🇰🇷,34165,2.5,14.7,1.5,24590,362340,2.9,66,0,41960,80,89,520,17,27.3,82,2.9,77,83.3,34,82,0.8,,14.83,5.8,51710000
          Latvia,🇱🇻,24194,11.2,20.8,1.2,19783,79245,6.3,72,2.2,29876,92,89,487,18,12.7,83,2.2,55,75.5,47,72,3.7,1.6,,6.2,1877000
          Lithuania,🇱🇹,28407,11.8,18.4,1.5,26976,182039,,72,2.5,31811,89,94,480,18,10.5,83,2.4,57,76.4,46,62,2.5,1,,6.4,2872000
          Luxembourg,🇱🇺,131384,0.1,20.7,2,44773,941162,2.2,67,1.7,65854,91,74,477,15,10,85,1.7,90,82.7,72,87,0.2,2.8,,7.4,666430
          Mexico,🇲🇽,15249,25.9,17.8,1.1,16269,,4,59,0.1,16230,77,42,416,15,20.3,75,3.2,63,75.1,66,42,26.8,27,,6,129700000
          Netherlands,🇳🇱,63750,0.1,19.6,2,34984,248599,2.5,78,0.9,58828,94,81,502,19,12.2,91,2.6,79,82.2,75,83,0.6,0.3,15.45,7.5,17880000
          New Zealand,🇳🇿,48531,0.1,25,2.4,39024,514162,4.5,77,0.4,45269,95,81,503,18,6,85,2.5,82,82.1,86,66,1.3,14,14.87,7.3,5223000
          Norway,🇳🇴,94660,0,17.7,2.1,39144,268358,2.8,75,0.9,55780,96,82,497,18,6.7,98,2.2,78,83,75,93,0.6,1.4,15.67,7.3,5520000
          Poland,🇵🇱,23014,2.3,21.2,1.1,23675,233221,5,69,0.6,32527,94,93,513,18,22.8,82,2.6,68,78,60,71,0.5,4.2,14.68,6.1,36690000
          Portugal,🇵🇹,28969,0.9,19.6,1.7,24877,255303,8.1,69,2.3,28410,87,55,492,17,8.3,89,1.5,49,81.8,50,83,0.7,5.6,,5.8,10580000
          Slovak Republic,🇸🇰,25935,1.5,27.4,1.1,21149,171425,8.8,68,3,23619,95,92,469,16,18.5,81,3,66,77.8,65,76,0.8,4.2,,6.5,5427000
          Slovenia,🇸🇮,34026,0.2,18.2,1.6,25250,233286,5.9,71,1.9,41445,95,90,504,18,17,93,2.5,53,81.6,67,91,0.4,5.6,,6.5,2120000
          Spain,🇪🇸,34045,0.3,21.7,1.9,27155,366534,15.8,62,5,37922,93,63,,18,10,76,1.8,72,83.9,75,80,0.7,2.5,15.75,6.5,48350000
          Sweden,🇸🇪,58529,0,20.1,1.7,33730,,4.4,75,1,47020,94,84,503,20,5.8,97,2,87,83.2,76,79,1.1,0.9,,7.3,10540000
          Switzerland,🇨🇭,105669,0,21.4,1.9,39697,,,80,1.7,64824,94,89,498,17,10.1,96,2.3,45,84,81,86,0.3,0.4,,7.5,8888000
          Türkiye,🇹🇷,12765,4.9,18.9,1,,,13,48,3.3,,85,42,462,19,27.1,62,1.5,86,78.6,67,59,1,25,14.61,4.9,85330000
          United Kingdom,🇬🇧,51075,0.5,23.2,2,33049,524422,3.3,75,0.9,47147,93,82,503,17,10.1,82,3.1,68,81.3,73,78,0.2,10.8,14.94,6.8,68350000
          United States,🇺🇸,85373,0.1,18.3,2.4,51147,684500,4.2,67,0.5,69392,94,92,495,17,7.7,88,3.1,65,78.9,88,78,6,10.4,14.57,7,340100000
        </file>

        <file path="public/2024BetterLife.csv">
          Country,Flag,GDP per capita (USD),  Dwellings without basic facilities,  Housing expenditure,  Rooms per person,  Household net adjusted disposable income,  Household net wealth,  Labour market insecurity,  Employment rate,  Long-term unemployment rate,  Personal earnings,  Quality of support network,  Educational attainment,  Student skills,  Years in education,  Air pollution,  Water quality,  Stakeholder engagement for developing regulations,  Voter turnout,  Life expectancy,  Self-reported health,  Feeling safe walking alone at night,  Homicide rate,  Employees working very long hours,  Time devoted to leisure and personal care,  Life satisfaction,Population
          Australia,🇦🇺,66589,1.1,19.4,2.3,37433,528768,3.1,73,1,55206,93,84,499,20,6.7,92,2.7,92,83,85,67,0.9,12.5,14.36,7.1,26660000
          Austria,🇦🇹,59225,0.8,20.8,1.6,37001,309637,2.3,72,1.3,53132,92,86,491,17,12.2,92,1.3,76,82,71,86,0.5,5.3,14.51,7.2,9132000
          Belgium,🇧🇪,55536,0.7,20,2.1,34884,447607,2.4,65,2.3,54327,90,80,500,19,12.8,79,2,88,82.1,74,56,1.1,4.3,15.52,6.8,11790000
          Canada,🇨🇦,54866,0.2,22.9,2.6,34421,478240,3.8,70,0.5,55342,93,92,517,17,7.1,90,2.9,68,82.1,89,78,1.2,3.3,14.57,7,40100000
          Chile,🇨🇱,16616,9.4,18.4,1.9,135787,135787,7,56,,26729,88,67,438,17,23.4,62,1.3,47,80.6,60,41,2.4,7.7,,6.2,19660000
          Colombia,🇨🇴,7327,12.3,,1,,,,58,1.1,,80,59,406,14,22.6,82,1.4,53,76.7,80,50,23.1,23.7,,5.7,52320000
          Costa Rica,🇨🇷,18031,2.3,17,1.2,16517,,,55,1.5,,82,43,415,,17.5,87,1.8,66,80.5,73,47,10,22,,6.3,5106000
          Czechia,🇨🇿,29801,0.5,23.4,1.5,26664,,2.3,74,0.6,29885,96,94,495,18,17,89,1.6,62,79.3,62,77,0.7,4.5,,6.9,10860000
          Denmark,🇩🇰,68898,0.5,23.3,1.9,33774,149864,4.5,74,0.9,58430,95,82,501,19,10,93,2,85,81.5,70,85,0.5,1.1,,7.5,5947000
          Estonia,🇪🇪,31855,5.7,17,1.7,23784,188627,5.4,74,1.2,30720,95,91,526,18,5.9,86,2.7,64,78.8,57,79,1.9,2.2,14.98,6.5,1370000
          Finland,🇫🇮,55127,0.4,23.1,1.9,33471,230032,2.2,72,1.2,46230,96,91,516,20,5.5,97,2.2,69,82.1,68,88,1.2,3.6,15.17,7.9,5584000
          France,🇫🇷,47359,0.5,20.7,1.8,34375,298639,3.1,65,2.9,45581,94,81,494,17,11.4,78,2.1,75,82.9,67,74,0.4,7.7,16.2,6.7,68290000
          Germany,🇩🇪,54291,0.1,20,1.8,38971,304317,1.4,77,1.2,53745,90,86,500,18,12,91,1.8,76,81.4,66,76,0.4,3.9,15.62,7.3,83280000
          Greece,🇬🇷,23966,0.4,21.8,1.2,20791,148323,21.7,56,10.8,27207,78,76,453,19,14.5,67,1.8,58,81.7,79,69,1,4.5,15.03,5.8,10410000
          Hungary,🇭🇺,23319,3.5,19.9,1.4,21026,150296,3.8,70,1.2,25409,94,86,479,16,16.7,81,1.2,70,76.4,58,74,0.9,1.5,15.08,6,9592000
          Iceland,🇮🇸,84594,0,20.5,1.6,,,1,78,0.7,67488,98,76,481,19,6.4,97,2.1,81,83.2,77,85,0.3,11.7,,7.6,393349
          Ireland,🇮🇪,106059,0.2,20.6,2.1,29488,370341,2.6,68,1.2,49474,96,85,505,18,7.8,80,1.3,63,82.8,84,76,0.5,4.7,14.54,7,5308000
          Israel,🇮🇱,53372,3.9,20.5,1.2,,,4.6,67,0.2,39322,95,88,465,16,19.7,77,2.5,67,82.9,74,80,1.5,14.1,,7.2,9757000
          Italy,🇮🇹,39580,0.6,22.5,1.4,29431,295020,8.6,58,4.8,37769,89,63,477,17,15.9,77,2.5,73,83.6,73,73,0.5,3.3,16.47,6.5,58990000
          Japan,🇯🇵,33138,6.4,21.8,1.9,28872,294735,2.7,77,0.8,38515,89,,520,16,13.7,87,1.4,53,84.4,37,77,0.2,,14.1,6.1,124500000
          Korea,🇰🇷,34165,2.5,14.7,1.5,24590,362340,2.9,66,0,41960,80,89,520,17,27.3,82,2.9,77,83.3,34,82,0.8,,14.83,5.8,51710000
          Latvia,🇱🇻,24194,11.2,20.8,1.2,19783,79245,6.3,72,2.2,29876,92,89,487,18,12.7,83,2.2,55,75.5,47,72,3.7,1.6,,6.2,1877000
          Lithuania,🇱🇹,28407,11.8,18.4,1.5,26976,182039,,72,2.5,31811,89,94,480,18,10.5,83,2.4,57,76.4,46,62,2.5,1,,6.4,2872000
          Luxembourg,🇱🇺,131384,0.1,20.7,2,44773,941162,2.2,67,1.7,65854,91,74,477,15,10,85,1.7,90,82.7,72,87,0.2,2.8,,7.4,666430
          Mexico,🇲🇽,15249,25.9,17.8,1.1,16269,,4,59,0.1,16230,77,42,416,15,20.3,75,3.2,63,75.1,66,42,26.8,27,,6,129700000
          Netherlands,🇳🇱,63750,0.1,19.6,2,34984,248599,2.5,78,0.9,58828,94,81,502,19,12.2,91,2.6,79,82.2,75,83,0.6,0.3,15.45,7.5,17880000
          New Zealand,🇳🇿,48531,0.1,25,2.4,39024,514162,4.5,77,0.4,45269,95,81,503,18,6,85,2.5,82,82.1,86,66,1.3,14,14.87,7.3,5223000
          Norway,🇳🇴,94660,0,17.7,2.1,39144,268358,2.8,75,0.9,55780,96,82,497,18,6.7,98,2.2,78,83,75,93,0.6,1.4,15.67,7.3,5520000
          Poland,🇵🇱,23014,2.3,21.2,1.1,23675,233221,5,69,0.6,32527,94,93,513,18,22.8,82,2.6,68,78,60,71,0.5,4.2,14.68,6.1,36690000
          Portugal,🇵🇹,28969,0.9,19.6,1.7,24877,255303,8.1,69,2.3,28410,87,55,492,17,8.3,89,1.5,49,81.8,50,83,0.7,5.6,,5.8,10580000
          Slovak Republic,🇸🇰,25935,1.5,27.4,1.1,21149,171425,8.8,68,3,23619,95,92,469,16,18.5,81,3,66,77.8,65,76,0.8,4.2,,6.5,5427000
          Slovenia,🇸🇮,34026,0.2,18.2,1.6,25250,233286,5.9,71,1.9,41445,95,90,504,18,17,93,2.5,53,81.6,67,91,0.4,5.6,,6.5,2120000
          Spain,🇪🇸,34045,0.3,21.7,1.9,27155,366534,15.8,62,5,37922,93,63,,18,10,76,1.8,72,83.9,75,80,0.7,2.5,15.75,6.5,48350000
          Sweden,🇸🇪,58529,0,20.1,1.7,33730,,4.4,75,1,47020,94,84,503,20,5.8,97,2,87,83.2,76,79,1.1,0.9,,7.3,10540000
          Switzerland,🇨🇭,105669,0,21.4,1.9,39697,,,80,1.7,64824,94,89,498,17,10.1,96,2.3,45,84,81,86,0.3,0.4,,7.5,8888000
          Türkiye,🇹🇷,12765,4.9,18.9,1,,,13,48,3.3,,85,42,462,19,27.1,62,1.5,86,78.6,67,59,1,25,14.61,4.9,85330000
          United Kingdom,🇬🇧,51075,0.5,23.2,2,33049,524422,3.3,75,0.9,47147,93,82,503,17,10.1,82,3.1,68,81.3,73,78,0.2,10.8,14.94,6.8,68350000
          United States,🇺🇸,85373,0.1,18.3,2.4,51147,684500,4.2,67,0.5,69392,94,92,495,17,7.7,88,3.1,65,78.9,88,78,6,10.4,14.57,7,340100000
        </file>

        <file path="src/types/d3-shim.d.ts">
          /// <reference types="geojson" />

          // Give TS at least an 'any' module for d3 so imports work
          declare module "d3";
        </file>

        <file path="src/vite-env.d.ts">
          /// <reference types="vite/client" />
        </file>

        <file path=".gitignore">
          # Logs
          logs
          *.log
          npm-debug.log*
          yarn-debug.log*
          yarn-error.log*
          pnpm-debug.log*
          lerna-debug.log*

          node_modules
          dist
          dist-ssr
          *.local

          # Editor directories and files
          .vscode/*
          !.vscode/extensions.json
          .idea
          .DS_Store
          *.suo
          *.ntvs*
          *.njsproj
          *.sln
          *.sw?
        </file>

        <file path="public/data/world.geojson">
          {
          "type": "FeatureCollection",
          "features": [
          {
          "type": "Feature",
          "properties": { "name": "Afghanistan" },
          "geometry": {
          "type": "Polygon",
          "coordinates": [
          [
          [61.210817, 35.650072],
          [62.230651, 35.270664],
          [62.984662, 35.404041],
          [63.193538, 35.857166],
          [63.982896, 36.007957],
          [64.546479, 36.312073],
          [64.746105, 37.111818],
          [65.588948, 37.305217],
          [65.745631, 37.661164],
          [66.217385, 37.39379],
          [66.518607, 37.362784],
          [67.075782, 37.356144],
          [67.83, 37.144994],
          [68.135562, 37.023115],
          [68.859446, 37.344336],
          [69.196273, 37.151144],
          [69.518785, 37.608997],
          [70.116578, 37.588223],
          [70.270574, 37.735165],
          [70.376304, 38.138396],
          [70.806821, 38.486282],
          [71.348131, 38.258905],
          [71.239404, 37.953265],
          [71.541918, 37.905774],
          [71.448693, 37.065645],
          [71.844638, 36.738171],
          [72.193041, 36.948288],
          [72.63689, 37.047558],
          [73.260056, 37.495257],
          [73.948696, 37.421566],
          [74.980002, 37.41999],
          [75.158028, 37.133031],
          [74.575893, 37.020841],
          [74.067552, 36.836176],
          [72.920025, 36.720007],
          [71.846292, 36.509942],
          [71.262348, 36.074388],
          [71.498768, 35.650563],
          [71.613076, 35.153203],
          [71.115019, 34.733126],
          [71.156773, 34.348911],
          [70.881803, 33.988856],
          [69.930543, 34.02012],
          [70.323594, 33.358533],
          [69.687147, 33.105499],
          [69.262522, 32.501944],
          [69.317764, 31.901412],
          [68.926677, 31.620189],
          [68.556932, 31.71331],
          [67.792689, 31.58293],
          [67.683394, 31.303154],
          [66.938891, 31.304911],
          [66.381458, 30.738899],
          [66.346473, 29.887943],
          [65.046862, 29.472181],
          [64.350419, 29.560031],
          [64.148002, 29.340819],
          [63.550261, 29.468331],
          [62.549857, 29.318572],
          [60.874248, 29.829239],
          [61.781222, 30.73585],
          [61.699314, 31.379506],
          [60.941945, 31.548075],
          [60.863655, 32.18292],
          [60.536078, 32.981269],
          [60.9637, 33.528832],
          [60.52843, 33.676446],
          [60.803193, 34.404102],
          [61.210817, 35.650072]
          ]
          ]
          },
          "id": "AFG"
          },
          REST OMITTED in here
    }
  ]
}
</file>

<file path="src/scatter.ts">
// @ts-nocheck
import * as d3 from "d3";

export async function drawScatter(containerId: string) {
  const container = d3.select(`#${containerId}`);
  container.selectAll("*").remove();

  // dimensions
  const fullW = container.node()?.clientWidth || 700;
  const fullH = 500;
  const margin = { top: 20, right: 20, bottom: 60, left: 60 };
  const w = fullW - margin.left - margin.right;
  const h = fullH - margin.top - margin.bottom;

  // SVG setup
  const svg = container
    .append("svg")
    .attr("width", fullW)
    .attr("height", fullH)
    .attr("viewBox", `0 0 ${fullW} ${fullH}`);
  const g = svg.append("g").attr("transform", `translate(${margin.left},${margin.top})`);

  // load & parse
  const raw: any[] = await d3.csv("/data/2024BetterLife.csv", d3.autoType);
  if (!raw.length) return;

  // detect keys
  const headers = Object.keys(raw[0]);
  const xKey = headers.find(k => /disposable income/i.test(k))!;
  const yKey = headers.find(k => /very long hours/i.test(k))!;
  const popKey = headers.find(k => /population/i.test(k));

  const data = raw.filter(d => isFinite(d[xKey]) && isFinite(d[yKey]));

  // scales
  const x = d3
    .scaleLinear()
    .domain(d3.extent(data, d => d[xKey]) as [number, number])
    .nice()
    .range([0, w]);
  const y = d3
    .scaleLinear()
    .domain(d3.extent(data, d => d[yKey]) as [number, number])
    .nice()
    .range([h, 0]);
  const rScale = popKey
    ? d3.scaleSqrt().domain(d3.extent(data, d => d[popKey]) as [number, number]).range([3, 18])
    : () => 6;

  // continent palette
  const palette: Record<string, string> = {
    Europe: "#1f77b4",
    Americas: "#ff7f0e",
    Asia: "#2ca02c",
    Oceania: "#d62728",
  };
  function regionOf(country: string): string {
    const eu = ["Austria","Belgium","Czechia","Denmark","Estonia","Finland",
      "France","Germany","Greece","Hungary","Iceland","Ireland","Italy","Latvia",
      "Lithuania","Luxembourg","Netherlands","Norway","Poland","Portugal",
      "Slovak Republic","Slovenia","Spain","Sweden","Switzerland","Türkiye",
      "United Kingdom"];
    const am = ["Canada","Chile","Colombia","Costa Rica","Mexico","United States"];
    const as = ["Israel","Japan","Korea"];
    const oc = ["Australia","New Zealand"];
    if (eu.includes(country)) return "Europe";
    if (am.includes(country)) return "Americas";
    if (as.includes(country)) return "Asia";
    if (oc.includes(country)) return "Oceania";
    return "Europe";
  }

  // axes
  g.append("g")
    .attr("transform", `translate(0,${h})`)
    .call(d3.axisBottom(x).tickFormat(d3.format("$.2s")));
  g.append("g")
    .call(d3.axisLeft(y).tickFormat(d => `${d}%`));

  // labels
  g.append("text")
    .attr("x", w / 2)
    .attr("y", h + 40)
    .attr("text-anchor", "middle")
    .attr("fill", "#000")
    .text("Household net adjusted disposable income (USD)");

  g.append("text")
    .attr("transform", "rotate(-90)")
    .attr("x", -h / 2)
    .attr("y", -45)
    .attr("text-anchor", "middle")
    .attr("fill", "#000")
    .text("Employees working very long hours (%)");

  // tooltip
  let tip = d3.select("body").selectAll(".scatter-tip").data([0]);
  tip
    .enter()
    .append("div")
    .attr("class", "scatter-tip")
    .style("position", "absolute")
    .style("pointer-events", "none")
    .style("opacity", 0)
    .merge(tip);

  const fmt = d3.format(",");

  // draw points
  g.selectAll("circle")
    .data(data, d => d.Country)
    .join("circle")
    .attr("cx", d => x(d[xKey]))
    .attr("cy", d => y(d[yKey]))
    .attr("r", d => (popKey ? rScale(d[popKey]) : rScale()))
    .attr("fill", d => palette[regionOf(d.Country)])
    .attr("opacity", 0.8)
    .on("mouseover", (e: any, d: any) => {
      d3.select(".scatter-tip")
        .style("opacity", 1)
        .html(
          `<strong>${d.Flag} ${d.Country}</strong><br/>
           Income: $${fmt(d[xKey])}<br/>
           Hours: ${d[yKey]}%<br/>
           Population: ${popKey ? fmt(d[popKey]) : "n/a"}`
        )
        .style("left", e.pageX + 10 + "px")
        .style("top", e.pageY + 10 + "px");
    })
    .on("mouseout", () => d3.select(".scatter-tip").style("opacity", 0));
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Better Life Index 2024</title>
  <link rel="stylesheet" href="/src/style.css" />
</head>
<body>
  <div id="carousel" class="carousel">
    <div class="slide-container">
      <!-- slide template -->
      <div class="slide">
        <h1 class="headline"></h1>
        <p class="description"></p>
        <div class="images">
          <img class="img1" alt="placeholder 1" />
          <img class="img2" alt="placeholder 2" />
        </div>
        <div class="nav-controls">
          <button class="prev nav-btn">← Previous</button>
          <button class="next nav-btn">Next →</button>
        </div>
      </div>
    </div>
  </div>

  <script type="module" src="/src/main.ts"></script>
</body>
</html>

<!-- TODO: fix legend of scatter plot in introduction -->
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting & strictness tweaks */
    "strict": true,
    "noImplicitAny": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "src",
    "src/types"
  ]
}
</file>

<file path="package.json">
{
  "name": "better-life-dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "@types/geojson": "^7946.0.8",
    "@types/topojson-client": "^3.1.5",
    "typescript": "~5.8.3",
    "vite": "^6.3.5"
  },
  "dependencies": {
    "d3": "^7.9.0",
    "topojson-client": "^3.1.0"
  }
}
</file>

<file path="README.md">
# OECD Better Life Index 2024 
## Dashbaord
</file>

<file path="dashboard.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
    />
    <title>OECD Better Life Index Dashboard</title>
    <link rel="stylesheet" href="/src/style.css" />
</head>
<body>
<div class="dashboard-container">
    <h1 class="headline">OECD Better Life Index Dashboard</h1>

    <section class="control-panel" style="margin-bottom: 20px;">
        <div>
            <label for="country-select">Select Country (for Radar & Scatter Plot Highlight):</label>
            <select id="country-select">
                <option>Loading…</option>
            </select>
        </div>
    </section>

    <section id="radar-chart-section" style="margin-top: 20px;">
        <h2 style="font-size: 1.5em; margin-bottom: 10px;">Country Profile vs. OECD Average (Radar)</h2>
        <div id="chart"></div> <!-- Container for Radar Chart -->
    </section>

    <section id="scatter-plot-section" style="margin-top: 30px; border-top: 1px solid #ccc; padding-top: 20px;">
        <h2 style="font-size: 1.5em; margin-bottom: 10px;">Explore Indicator Relationships (Scatter)</h2>

        <div class="scatter-plot-controls" style="margin-bottom: 20px; padding: 10px; background-color: #f0f0f0; border-radius: 4px; border: 1px solid #ddd;">
            <div>
                <label for="x-axis-select" style="display: inline-block; min-width: 60px; margin-bottom: 5px;">X-Axis:</label>
                <select id="x-axis-select"></select>
            </div>
            <div style="margin-top: 5px;">
                <label for="y-axis-select" style="display: inline-block; min-width: 60px; margin-bottom: 5px;">Y-Axis:</label>
                <select id="y-axis-select"></select>
            </div>
            <div style="margin-top: 10px;">
                <input type="checkbox" id="scale-population-checkbox" style="margin-left: 0; vertical-align: middle;">
                <label for="scale-population-checkbox" style="vertical-align: middle;">Scale dots by population</label>
            </div>
        </div>

        <div id="scatter-plot-container"></div> <!-- Container for Scatter Plot -->
    </section>

    <section id="bar-chart-section" style="margin-top: 30px; border-top: 1px solid #ccc; padding-top: 20px;">
        <h2 style="font-size: 1.5em; margin-bottom: 10px;">Compare Countries/Continents (Bar)</h2>

        <div class="bar-chart-controls" style="margin-bottom: 20px; padding: 10px; background-color: #f0f0f0; border-radius: 4px; border: 1px solid #ddd;">
            <div>
                <label for="property-select" style="display: inline-block; min-width: 120px; margin-bottom: 5px;">Select Property:</label>
                <select id="property-select"></select>
            </div>
            <div style="margin-top: 10px;">
                <input type="checkbox" id="continent-mode" style="margin-left: 0; vertical-align: middle;">
                <label for="continent-mode" style="vertical-align: middle;">Group by Continent</label>
            </div>
            <div id="num-select-group" style="margin-top: 5px;">
                <label for="num-select" style="display: inline-block; min-width: 120px; margin-bottom: 5px;">Show (Countries):</label>
                <select id="num-select"></select>
            </div>
        </div>

        <div id="bar-chart"></div> <!-- Container for Bar Chart -->
    </section>

</div>

<a href="index.html" class="prev-link nav-btn">← Go to Introduction</a>

<script type="module" src="/src/dashboard.ts"></script>
</body>
</html>
</file>

<file path="src/dashboard.ts">
// @ts-nocheck
import * as d3 from 'd3';

// 1. Configuration & globals
// --- Radar Chart Config ---
const selectedIndicatorsRadar = [
    'Housing expenditure', 'Rooms per person',
    'Household net adjusted disposable income',
    'Household net wealth', 'Employment rate',
    'Personal earnings', 'Quality of support network',
    'Educational attainment', 'Student skills',
    'Life expectancy', 'Self-reported health'
];
const formatIndicatorRadar = (ind) => ({
    'Housing expenditure': 'Housing',
    'Rooms per person': 'Living space',
    'Household net adjusted disposable income': 'Income',
    'Household net wealth': 'Wealth',
    'Employment rate': 'Employment',
    'Personal earnings': 'Earnings',
    'Quality of support network': 'Social support',
    'Educational attainment': 'Education',
    'Student skills': 'Skills',
    'Life expectancy': 'Health',
    'Self-reported health': 'Well-being'
}[ind] || ind);

// --- Scatter Plot Config & Globals ---
const scatterPlotFullWidth = 750;
const scatterPlotFullHeight = 550;
const scatterPlotMargin = { top: 30, right: 30, bottom: 50, left: 60 };
const scatterPlotFixedRadius = 5;
const scatterPlotHighlightColor = "orange";

let scatterPlotSvg;
let scatterPlotG;
let betterlifeindexDataWide = [];
let scatterPlotMasterCountry = null;
let currentXCategory = 'Job satisfaction';
let currentYCategory = 'Life satisfaction';
let shouldScaleByPopulation = false;

// --- Bar Chart Config & Globals ---
const barChartFullWidth = 900;
const barChartFullHeight = 500;
const barChartMargin = { top: 40, right: 20, bottom: 60, left: 80 };
let barSvg;
let barG;
let numericKeys = [];

// 2. Load CSV and initialize controls
d3.csv('/2024BetterLife.csv', d3.autoType).then(raw => {
    if (!raw || raw.length === 0) {
        console.error("Failed to load or data is empty.");
        return;
    }
    betterlifeindexDataWide = raw;

    const countries = Array.from(new Set(raw.map(d => d.Country))).sort();

    // --- Common Country Selector ---
    const countrySelect = document.getElementById('country-select') as HTMLSelectElement;
    if (countrySelect) {
        // populate options
        countrySelect.innerHTML = countries.map(c => `<option value="${c}">${c}</option>`).join('');
        // pre-select saved country if exists, otherwise default to first
        const savedCountry = localStorage.getItem('bli-selected-country');
        if (savedCountry && countries.includes(savedCountry)) {
            countrySelect.value = savedCountry;
            scatterPlotMasterCountry = savedCountry;
        } else if (countries.length > 0) {
            countrySelect.value = countries[0];
            scatterPlotMasterCountry = countries[0];
        }
    } else {
        console.error("Country select element not found.");
    }

    // --- Data Preparation for Radar Chart ---
    const rawKeys = Object.keys(raw[0]).filter(k => k !== 'Country');
    const radarChartLongData = raw.flatMap(row =>
        rawKeys.map(key => ({
            Country: row.Country,
            Indicator: key.trim(),
            Value: +(row[key] || 0)
        }))
    );
    const extentByIndicatorRadar = new Map();
    for (const ind of selectedIndicatorsRadar) {
        const vals = radarChartLongData
            .filter(d => d.Indicator === ind && typeof d.Value === 'number' && !isNaN(d.Value))
            .map(d => d.Value);
        if (vals.length > 0) {
            extentByIndicatorRadar.set(ind, [d3.min(vals), d3.max(vals)]);
        } else {
            extentByIndicatorRadar.set(ind, [0, 0]);
            console.warn(`No valid data for radar indicator: ${ind}`);
        }
    }

    // --- Scatter Plot Controls ---
    const xAxisSelect = document.getElementById('x-axis-select') as HTMLSelectElement;
    const yAxisSelect = document.getElementById('y-axis-select') as HTMLSelectElement;
    const scalePopCheckbox = document.getElementById('scale-population-checkbox') as HTMLInputElement;

    numericKeys = Object.keys(raw[0]).filter(k => k !== 'Country' && k !== 'Flag' && k !== 'Population' && typeof raw[0][k] === 'number');

    if (xAxisSelect && yAxisSelect) {
        for (const k of numericKeys) {
            xAxisSelect.add(new Option(k, k));
            yAxisSelect.add(new Option(k, k));
        }
        xAxisSelect.value = currentXCategory;
        yAxisSelect.value = currentYCategory;
    } else {
        console.error("Scatter axis select elements not found.");
    }
    if (scalePopCheckbox) {
        scalePopCheckbox.checked = shouldScaleByPopulation;
    } else {
        console.error("Scale population checkbox not found.");
    }

    // --- Bar Chart Controls ---
    const propertySelect = document.getElementById('property-select') as HTMLSelectElement;
    const numSelect = document.getElementById('num-select') as HTMLSelectElement;
    const continentCheckbox = document.getElementById('continent-mode') as HTMLInputElement;

    if (propertySelect) {
        numericKeys.forEach(k => propertySelect.add(new Option(k, k)));
        if (numericKeys.length > 0) propertySelect.value = numericKeys[0];
    } else {
        console.error("Bar chart property select not found.");
    }

    if (numSelect) {
        ['Top 3', 'Top 5', 'Top 10', 'Top 15', 'All'].forEach(o => numSelect.add(new Option(o, o)));
        numSelect.value = 'Top 10';
    } else {
        console.error("Bar chart num select not found.");
    }

    // Setup SVG containers
    setupScatterPlotSVG('#scatter-plot-container');
    setupBarChartSVG('#bar-chart');

    // Initial Render
    renderScatterPlot();
    if (scatterPlotMasterCountry) {
        renderRadarChart('#chart', radarChartLongData, extentByIndicatorRadar, scatterPlotMasterCountry);
    }
    renderBarChart();

    // Event Listeners
    if (xAxisSelect) xAxisSelect.onchange = () => { currentXCategory = xAxisSelect.value; renderScatterPlot(); };
    if (yAxisSelect) yAxisSelect.onchange = () => { currentYCategory = yAxisSelect.value; renderScatterPlot(); };
    if (scalePopCheckbox) scalePopCheckbox.onchange = () => { shouldScaleByPopulation = scalePopCheckbox.checked; renderScatterPlot(); };
    if (countrySelect) countrySelect.onchange = () => {
        scatterPlotMasterCountry = countrySelect.value;
        localStorage.setItem('bli-selected-country', scatterPlotMasterCountry); // Save selection
        renderScatterPlot();
        if (scatterPlotMasterCountry) renderRadarChart('#chart', radarChartLongData, extentByIndicatorRadar, scatterPlotMasterCountry);
    };
    if (propertySelect) propertySelect.onchange = () => { renderBarChart(); };
    if (numSelect) numSelect.onchange = () => { renderBarChart(); };
    if (continentCheckbox) continentCheckbox.onchange = () => {
        const numGroup = document.getElementById('num-select-group');
        if (numGroup) numGroup.style.display = continentCheckbox.checked ? 'none' : '';
        renderBarChart();
    };
});


// 3. Scatter Plot Functions
// type Selector = string; // Removed for V1 style simplicity with @ts-nocheck
function setupScatterPlotSVG(selector) {
    const container = d3.select(selector);
    if (container.empty()) { console.error(`Scatter plot container ${selector} not found.`); return; }
    scatterPlotSvg = container.append('svg')
        .attr('width', scatterPlotFullWidth)
        .attr('height', scatterPlotFullHeight)
        .attr('viewBox', `0 0 ${scatterPlotFullWidth} ${scatterPlotFullHeight}`)
        .attr('style', 'max-width: 100%; height: auto; background: #f9f9f9; font-family: Raleway, sans-serif; border: 1px solid #ddd;');
    scatterPlotG = scatterPlotSvg.append('g')
        .attr('transform', `translate(${scatterPlotMargin.left},${scatterPlotMargin.top})`);
}

function renderScatterPlot() {
    if (!scatterPlotG || !betterlifeindexDataWide.length) return;
    const drawingWidth = scatterPlotFullWidth - scatterPlotMargin.left - scatterPlotMargin.right;
    const drawingHeight = scatterPlotFullHeight - scatterPlotMargin.top - scatterPlotMargin.bottom;
    const filteredData = betterlifeindexDataWide.filter(d =>
        typeof d[currentXCategory] === 'number' && !isNaN(d[currentXCategory]) &&
        typeof d[currentYCategory] === 'number' && !isNaN(d[currentYCategory]) &&
        d.Population !== undefined && typeof d.Population === 'number' && !isNaN(d.Population)
    );
    if (!filteredData.length) { scatterPlotG.selectAll('*').remove(); return; }
    const xScale = d3.scaleLinear().domain(d3.extent(filteredData, d => d[currentXCategory])).nice().range([0, drawingWidth]);
    const yScale = d3.scaleLinear().domain(d3.extent(filteredData, d => d[currentYCategory])).nice().range([drawingHeight, 0]);
    const radiusScale = shouldScaleByPopulation ? d3.scaleSqrt().domain(d3.extent(filteredData, d => d.Population)).range([3, 25]) : () => scatterPlotFixedRadius;
    scatterPlotG.selectAll('*').remove();
    scatterPlotG.append('g').attr('transform', `translate(0,${drawingHeight})`).call(d3.axisBottom(xScale));
    scatterPlotG.append('g').call(d3.axisLeft(yScale));
    scatterPlotG.append('text').attr('class', 'x-label').attr('text-anchor', 'middle').attr('x', drawingWidth/2).attr('y', drawingHeight + scatterPlotMargin.bottom -10).text(currentXCategory).style('font-size','12px').attr('fill','black');
    scatterPlotG.append('text').attr('class','y-label').attr('text-anchor','middle').attr('transform','rotate(-90)').attr('x', -drawingHeight/2).attr('y', -scatterPlotMargin.left+15).text(currentYCategory).style('font-size','12px').attr('fill','black');
    let tooltip = d3.select('body').select('.scatter-tooltip-external');
    if (tooltip.empty()) {
        tooltip = d3.select('body').append('div').attr('class','scatter-tooltip-external')
            .style('position','absolute').style('background','rgba(255,255,255,0.95)').style('padding','8px 12px')
            .style('border','1px solid #ccc').style('border-radius','4px').style('pointer-events','none')
            .style('opacity',0).style('font-size','11px').style('box-shadow','0 2px 4px rgba(0,0,0,0.1)').style('white-space','nowrap').style('z-index','1050');
    }
    scatterPlotG.selectAll('circle.data-circle').data(filteredData, d => d.Country)
        .join('circle')
        .attr('class','data-circle')
        .attr('cx', d => xScale(d[currentXCategory]))
        .attr('cy', d => yScale(d[currentYCategory]))
        .attr('r', d => radiusScale(d.Population))
        .attr('fill', d => d.Country === scatterPlotMasterCountry ? scatterPlotHighlightColor : '#007acc')
        .attr('fill-opacity', d => d.Country === scatterPlotMasterCountry ? 1 : 0.6)
        .attr('stroke', d => d.Country === scatterPlotMasterCountry ? 'black' : 'none')
        .on('mouseover', (event, d) => {
            tooltip.style('opacity',0.9);
            const formatComma = d3.format(','); // Added for population formatting
            tooltip.html(`<strong>${d.Country} ${d.Flag || ''}</strong><br>${currentXCategory}: ${d[currentXCategory]}<br>${currentYCategory}: ${d[currentYCategory]}<br>Population: ${formatComma(d.Population)}`)
                .style('left',`${event.pageX+10}px`).style('top',`${event.pageY-20}px`);
            d3.select(event.currentTarget).raise();
        })
        .on('mouseout', () => tooltip.style('opacity',0));
}

// 4. Radar Chart Functions
function renderRadarChart(selector, data, extents, selectedCountry) {
    const chartContainer = d3.select(selector);
    if (chartContainer.empty()) { console.error(`Radar chart container ${selector} not found.`); return; }
    chartContainer.selectAll('*').remove();
    const radarMargin = { top:50, right:100, bottom:50, left:100 };
    const W = 700, H = 600;
    const R = Math.min(W - radarMargin.left - radarMargin.right, H - radarMargin.top - radarMargin.bottom) / 2;
    const angle = 2 * Math.PI / selectedIndicatorsRadar.length;
    const levels = 5;
    const svgRadar = chartContainer.append('svg')
        .attr('width', W).attr('height', H).attr('viewBox',`0 0 ${W} ${H}`)
        .style('background','var(--color-white)').style('font-family','Raleway, sans-serif');
    const gRadar = svgRadar.append('g').attr('transform',`translate(${W/2},${H/2})`);

    for (let i=1; i<=levels; i++) {
        gRadar.append('circle').attr('r', R*i/levels).attr('fill','none').attr('stroke','#ccc');
    }

    selectedIndicatorsRadar.forEach((ind,i) => {
        const a = i*angle - Math.PI/2;
        const x_ax = R * Math.cos(a), y_ax = R * Math.sin(a);
        gRadar.append('line').attr('x1',0).attr('y1',0)
            .attr('x2',x_ax).attr('y2',y_ax).attr('stroke','#999');
        gRadar.append('text')
            .attr('x',(R+25)*Math.cos(a)) // Adjusted from new for consistency
            .attr('y',(R+25)*Math.sin(a)) // Adjusted from new
            .attr('dy', ((a > Math.PI / 2 && a < 3 * Math.PI / 2) || (a < -Math.PI / 2 && a > -3 * Math.PI / 2)) ? '1em' : '0.35em')
            .attr('text-anchor', Math.abs(Math.cos(a)) < 0.01 ? 'middle' : (Math.cos(a) > 0 ? 'start' : 'end'))
            .style('font-size', '11px')
            .text(formatIndicatorRadar(ind));
    });

    const rScale = d3.scaleLinear([0, 10], [0, R]);

    const oecdAverages = Object.fromEntries(
        selectedIndicatorsRadar.map(ind => {
            const vals = data.filter(d => d.Indicator === ind && typeof d.Value === 'number' && !isNaN(d.Value)).map(d => d.Value);
            return [ind, vals.length > 0 ? d3.mean(vals) : 0];
        })
    );

    const radarPlotData = selectedIndicatorsRadar.flatMap(ind => {
        const extentPair = extents.get(ind);
        if (!extentPair) return [];
        const [lo, hi] = extentPair;
        const normalizeScale = (lo === hi) ? d3.scaleLinear([lo -1, hi + 1],[0,10]) : d3.scaleLinear([lo, hi], [0, 10]);
        const selRow = data.find(d => d.Country === selectedCountry && d.Indicator === ind);
        const selVal = (selRow && typeof selRow.Value === 'number' && !isNaN(selRow.Value)) ? selRow.Value : lo;
        return [
            { country: selectedCountry, indicator: ind, value: normalizeScale(selVal) },
            { country: 'OECD', indicator: ind, value: normalizeScale(oecdAverages[ind]) }
        ];
    });

    const radarLineGen = d3.lineRadial()
        .radius(d => rScale(d.value))
        .angle((d, i) => i * angle)
        .curve(d3.curveLinearClosed);

    const byCountryRadar = d3.group(radarPlotData, d => d.country);
    const colorRadar = d3.scaleOrdinal()
        .domain([selectedCountry, 'OECD'])
        .range(['#e41a1c', '#4daf4a']);

    for (const [countryName, pts] of byCountryRadar) {
        const ordered = selectedIndicatorsRadar.map(ind => pts.find(p => p.indicator === ind));
        if (ordered.some(p => p === undefined)) {
            console.warn(`Radar: Missing data for ${countryName}`);
            continue;
        }
        gRadar.append('path')
            .datum(ordered)
            .attr('d', radarLineGen)
            .attr('fill', colorRadar(countryName))
            .attr('fill-opacity', 0.2)
            .attr('stroke', colorRadar(countryName))
            .attr('stroke-width', 2);
        ordered.forEach((d, i) => {
            if (d === undefined) return;
            const a = i * angle - Math.PI / 2;
            const r_pt = rScale(d.value);
            gRadar.append('circle')
                .attr('cx', r_pt * Math.cos(a))
                .attr('cy', r_pt * Math.sin(a))
                .attr('r', 4)
                .attr('fill', colorRadar(countryName));
        });
    }

    const legendRadar = svgRadar.append('g')
        .attr('transform', `translate(${W - radarMargin.right + 20},${radarMargin.top})`);
    [selectedCountry, 'OECD'].forEach((c, i) => {
        const lg = legendRadar.append('g').attr('transform', `translate(0,${25 * i})`);
        lg.append('line').attr('x1', 0).attr('y1', 10).attr('x2', 30).attr('y2', 10).attr('stroke', colorRadar(c)).attr('stroke-width', 2);
        lg.append('circle').attr('cx', 15).attr('cy', 10).attr('r', 4).attr('fill', colorRadar(c));
        lg.append('text').attr('x', 40).attr('y', 10).attr('dy', '0.35em').style('font-size', '12px').text(c);
    });
}

// 5. Bar Chart Functions
function setupBarChartSVG(selector) {
    const container = d3.select(selector);
    if (container.empty()) {
        console.error(`Bar chart container ${selector} not found.`);
        return;
    }
    barSvg = container.append('svg')
        .attr('width', barChartFullWidth)
        .attr('height', barChartFullHeight)
        .attr('viewBox', `0 0 ${barChartFullWidth} ${barChartFullHeight}`)
        .style('max-width', '100%').style('height', 'auto');
    barG = barSvg.append('g')
        .attr('transform', `translate(${barChartMargin.left},${barChartMargin.top})`);
}

function renderBarChart() {
    if (!barG || !betterlifeindexDataWide.length) return;

    const continentCheckbox = document.getElementById('continent-mode') as HTMLInputElement;
    const numSelect = document.getElementById('num-select') as HTMLSelectElement;
    const propertySelect = document.getElementById('property-select') as HTMLSelectElement;

    const continentMode = continentCheckbox ? continentCheckbox.checked : false;
    const numVal = numSelect ? numSelect.value : 'Top 10';
    const prop = propertySelect ? propertySelect.value : (numericKeys.length > 0 ? numericKeys[0] : null);

    if (!prop) { barG.selectAll("*").remove(); return; }

    const dataForProp = betterlifeindexDataWide.filter(d => typeof d[prop] === 'number' && !isNaN(d[prop]));
    if (dataForProp.length === 0) { barG.selectAll("*").remove(); return; }

    const grouped = continentMode
        ? d3.rollup(dataForProp, v => d3.mean(v, d => d[prop]), d => regionOf(d.Country))
        : d3.rollup(dataForProp, v => d3.mean(v, d => d[prop]), d => d.Country);

    let entries = Array.from(grouped.entries())
        .map(([k, v]) => ({ key: k, value: (v === undefined || isNaN(v)) ? 0 : v }))
        .filter(d => d.value !== null && d.value !== undefined);

    entries.sort((a, b) => d3.descending(a.value, b.value));

    if (!continentMode) {
        if (numVal.startsWith('Top ')) {
            const n = +numVal.split(' ')[1];
            entries = entries.slice(0, n);
        }
    }

    if (entries.length === 0) { barG.selectAll("*").remove(); return; }

    barG.selectAll('*').remove();

    const drawingWidth = barChartFullWidth - barChartMargin.left - barChartMargin.right;
    const drawingHeight = barChartFullHeight - barChartMargin.top - barChartMargin.bottom;
    const maxValue = d3.max(entries, d => d.value);

    if (maxValue === undefined) return;

    const vertical = continentMode || ['Top 3', 'Top 5'].includes(numVal);

    if (vertical) {
        const xBand = d3.scaleBand().domain(entries.map(d => d.key)).range([0, drawingWidth]).padding(0.1);
        const yLin = d3.scaleLinear().domain([0, maxValue]).nice().range([drawingHeight, 0]);
        barG.append('g').attr('transform', `translate(0,${drawingHeight})`).call(d3.axisBottom(xBand))
            .selectAll("text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em").attr("dy", ".15em")
            .attr("transform", "rotate(-45)");
        barG.append('g').call(d3.axisLeft(yLin));
        barG.selectAll('rect.bar-rect')
            .data(entries).join('rect').attr('class', 'bar-rect')
            .attr('x', d => xBand(d.key))
            .attr('width', xBand.bandwidth())
            .attr('y', d => yLin(d.value))
            .attr('height', d => drawingHeight - yLin(d.value))
            .attr('fill', '#69b3a2');
    } else {
        const xLin = d3.scaleLinear().domain([0, maxValue]).nice().range([0, drawingWidth]);
        const yBand = d3.scaleBand().domain(entries.map(d => d.key)).range([drawingHeight, 0]).padding(0.1);
        barG.append('g').call(d3.axisLeft(yBand));
        barG.append('g').call(d3.axisTop(xLin).ticks(drawingWidth / 80));
        barG.selectAll('rect.bar-rect')
            .data(entries).join('rect').attr('class', 'bar-rect')
            .attr('y', d => yBand(d.key))
            .attr('height', yBand.bandwidth())
            .attr('x', 0)
            .attr('width', d => xLin(d.value))
            .attr('fill', '#404080');
    }
}

// 6. Helper Functions
function regionOf(country) {
    const eu = ["Austria", "Belgium", "Czechia", "Denmark", "Estonia", "Finland",
        "France", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Latvia",
        "Lithuania", "Luxembourg", "Netherlands", "Norway", "Poland", "Portugal",
        "Slovak Republic", "Slovenia", "Spain", "Sweden", "Switzerland", "Türkiye",
        "United Kingdom", "European Union (27 countries)"];
    const am = ["Canada", "Chile", "Colombia", "Costa Rica", "Mexico", "United States"];
    const as = ["Israel", "Japan", "Korea"];
    const oc = ["Australia", "New Zealand"];
    const af = ["South Africa"];
    if (eu.includes(country)) return "Europe";
    if (am.includes(country)) return "Americas";
    if (as.includes(country)) return "Asia";
    if (oc.includes(country)) return "Oceania";
    if (af.includes(country)) return "Africa";
    if (country && (country.toLowerCase().includes("oecd") || country.toLowerCase().includes("total"))) return "OECD Average";
    return "Other";
}
</file>

<file path="src/map.ts">
// src/map.ts
import * as d3 from 'd3';
import type { FeatureCollection, Geometry } from 'geojson';

export interface DrawMapOptions {
  containerId: string;
  csvUrl?: string;
  geojsonUrl?: string;
}

interface DataRecord {
  country: string;
  flag: string;
  value: number;
  gdp: number;
  leisure: number;
  rooms: number;
  population: number;
}

export async function drawMap(
    containerId: string,
    options?: DrawMapOptions
): Promise<void> {
  const opts = {
    containerId,
    csvUrl: options?.csvUrl ?? '/data/2024BetterLife.csv',
    geojsonUrl: options?.geojsonUrl ?? '/data/world.geojson'
  };

  const container = document.getElementById(opts.containerId);
  if (!container) throw new Error(`Container '#${opts.containerId}' not found`);
  const width = container.clientWidth;
  const height = container.clientHeight;

  // load CSV & GeoJSON
  const rawCsv = await d3.csv(opts.csvUrl) as Array<Record<string,string>>;
  const worldGeo = await d3.json(opts.geojsonUrl) as FeatureCollection<Geometry>;

  // parse
  const data: DataRecord[] = rawCsv.map(row => {
    const t: Record<string,string> = {};
    Object.entries(row).forEach(([k,v]) => t[k.trim()] = v);
    return {
      country:    t['Country'],
      flag:       t['Flag'],
      value:      +t['Life satisfaction'],
      gdp:        +t['GDP per capita (USD)'],
      leisure:    +t['Time devoted to leisure and personal care'],
      rooms:      +t['Rooms per person'],
      population: +t['Population']
    };
  });

  const oecdAvg = {
    value:   d3.mean(data, d => d.value)!,
    gdp:     d3.mean(data, d => d.gdp)!,
    leisure: d3.mean(data, d => d.leisure)!,
    rooms:   d3.mean(data, d => d.rooms)!
  };

  // controls, widget, SVG setup omitted for brevity…

  // draw countries
  const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height - 60);
  const projection = d3.geoNaturalEarth1()
      .scale(width / (1.3 * Math.PI))
      .translate([width/2, (height-60)/2]);
  const path = d3.geoPath(projection);

  const g = svg.append('g');
  g.selectAll('path.country')
      .data(worldGeo.features)
      .enter()
      .append('path')
      .attr('class','country')
      .attr('d', path as any)
      .attr('fill', d => {
        const rec = data.find(p => p.country === d.properties!.name);
        return rec ? d3.interpolateRdYlGn(rec.value) : '#eee';
      })
      .attr('stroke','#fff')
      .attr('stroke-width',0.5)
      .on('click', (_, d) => {
        const rec = data.find(p => p.country === d.properties!.name);
        if (rec) {
          updateWidget(rec);
          // store selection for dashboard pre-selection
          localStorage.setItem('bli-selected-country', rec.country);
        }
      });

  // … rest of drawMap (tooltips, zoom, updateWidget) stays the same
}
</file>

<file path="src/main.ts">
// src/main.ts
import { drawScatter } from "./scatter";
import { drawMap } from "./map";

interface Slide {
  headline: string;
  description: string;
  images: string[];
}

// Key for persisting the current slide index
const STORAGE_KEY = 'bli-current-slide';

// Slides for the introduction carousel
const slides: Slide[] = [
  {
    headline: "How’s life?",
    description: `What makes for a good life? Many people might say “money” or “career success,” but quality of life goes far beyond income. The OECD Better Life Index 2024 compares countries not just economically, but across 11 key dimensions that truly shape our daily lives — like health, education, environment, work-life balance, and social connection.<br><br>This project invites you to explore these factors interactively. Through data and storytelling, we’ll uncover where people are most satisfied with life in 2024 — and why.`,
    images: [],
  },
  {
    headline: "The 38 member countries",
    description: `The Better Life Index focuses on 38 OECD member countries. These nations vary widely in culture, policy, and — as we’ll see — in overall life satisfaction.<br><br>Take a look at the map below, and you’ll already notice something interesting: countries like Finland, Denmark, and the Netherlands are glowing with high satisfaction scores.<br><br>In contrast, countries like Turkey or Greece show much lower levels of reported life satisfaction. What explains this difference? What are the real drivers of happiness?`,
    images: [],
  },
  {
    headline: "Money or time? What really makes us happy?",
    description: `It’s tempting to assume: more money means more happiness. But let’s test that idea.<br><br>Below is a scatterplot showing average income on the x-axis and the share of people working very long hours on the y-axis — two key factors that shape our day-to-day experience. We might expect that richer countries offer more leisure, while poorer ones require more work. But do the data agree?<br><br>The result is surprising: there’s no strong trend. The U.S., for instance, has high income but also a large share of people working very long hours. On the other hand, the Netherlands — with moderate income — shows one of the lowest rates of overwork.<br><br>In short: money alone doesn’t buy balance. Time — and how it’s spent — may be even more important than wealth. This moment of contradiction keeps the audience curious and engaged: what else matters?`,
    images: [],
  },
  {
    headline: "What does the “perfect” country look like?",
    description: `Each country has its own strengths — and weaknesses. The Better Life Index evaluates 11 different life aspects: from jobs and health to environment, education, safety, and community.<br><br>No country is best at everything. That’s why we compare “profiles”—unique patterns across all dimensions of well-being. Compare, for example, the Netherlands and the United States. The Netherlands excels in work-life balance and social support, while the U.S. leads in education and income—but falls behind in safety and civic engagement.<br><br>The key insight: top-performing countries aren’t perfect—but balanced. They combine moderate to high values across many dimensions to create a more sustainable satisfaction.`,
    images: [],
  },
  {
    headline: "Where are you from?",
    description: `Curious about your own country? Use the dropdown below to see how it stacks up against others. Discover where it excels—and where it still has room to grow.`,
    images: [],
  },
  {
    headline: "Explore more: create your own comparisons",
    description: `Now it’s your turn. Select countries, filter categories, and test your own ideas. Look into income, safety, work pressure, education—whatever interests you. This dashboard empowers you to explore, ask questions, and go deeper than any single story could.`,
    images: [],
  },
  {
    headline: "Conclusion: <br> What is a “better life”?",
    description: `Our journey through the data shows:<br><br>There is no single “best” country. But there are patterns. The most satisfied societies aren’t always the richest—they’re the most balanced. They value time, trust, health, and freedom.<br><br>Quality of life is multi-dimensional. It’s about balance—not just growth. Data can help us understand, compare, and improve it. So what would you choose in a better life? More time? Better health? A safer community? This dashboard is your tool to explore.`,
    images: [],
  },
];

let current = 0;

// Restore saved slide index (if any) on load
const saved = localStorage.getItem(STORAGE_KEY);
if (saved !== null) {
  const idx = parseInt(saved, 10);
  if (!isNaN(idx) && idx >= 0 && idx < slides.length) {
    current = idx;
  }
}

const container = document.querySelector<HTMLDivElement>(".slide-container")!;
const template = container.querySelector<HTMLDivElement>(".slide")!;
template.remove();

const elems = slides.map((s, i) => {
  const el = template.cloneNode(true) as HTMLDivElement;
  el.querySelector(".headline")!.innerHTML    = s.headline;
  el.querySelector(".description")!.innerHTML = s.description;

  // images
  const imgWrap = el.querySelector<HTMLDivElement>(".images")!;
  if (s.images.length) {
    const imgs = imgWrap.querySelectorAll<HTMLImageElement>("img");
    imgs[0].src = s.images[0];
    if (s.images[1]) imgs[1].src = s.images[1];
    else imgs[1].style.display = "none";
  } else {
    imgWrap.remove();
  }

  // first‐slide logo + subtitle
  if (i === 0) {
    const logo = document.createElement("img");
    logo.src       = "/logo-bli.png";
    logo.alt       = "Better Life Index logo";
    logo.className = "logo";

    const subtitle = document.createElement("h2");
    subtitle.textContent = "2024 Visualized";
    subtitle.className   = "subtitle";

    el.prepend(subtitle);
    el.prepend(logo);
  }

  // ─── Map placeholder only on the “Where are you from?” slide
  if (s.headline === "Where are you from?") {
    const mapDiv = document.createElement("div");
    mapDiv.id = "map-container";
    el.querySelector(".description")!
        .insertAdjacentElement("afterend", mapDiv);
  }

  // ─── Scatter placeholder on the “Money or time?” slide
  if (s.headline.startsWith("Money or time")) {
    const scatterDiv = document.createElement("div");
    scatterDiv.id = "scatter-slide";
    scatterDiv.style.width     = "100%";
    scatterDiv.style.marginTop = "20px";
    el.querySelector(".description")!
        .insertAdjacentElement("afterend", scatterDiv);
  }

  container.append(el);
  return el;
});

// navigation buttons
elems.forEach((el, i) => {
  const prev = el.querySelector<HTMLButtonElement>(".prev")!;
  const next = el.querySelector<HTMLButtonElement>(".next")!;
  prev.style.visibility = i === 0 ? "hidden" : "visible";
  next.textContent      = i === slides.length - 1 ? "Go to Dashboard →" : "Next →";
  prev.onclick = () => navigate(-1);
  next.onclick = () => navigate(1);
});

function navigate(dir: number) {
  elems[current].classList.remove("active");

  // last slide → dashboard.html
  if (current === slides.length - 1 && dir === 1) {
    localStorage.setItem(STORAGE_KEY, current.toString());
    window.location.href = "dashboard.html";
    return;
  }

  current = (current + dir + elems.length) % elems.length;
  elems[current].classList.add("active");
  localStorage.setItem(STORAGE_KEY, current.toString());

  // draw map when landing on “Where are you from?”
  if (
      slides[current].headline === "Where are you from?" &&
      !document.querySelector("#map-container svg")
  ) {
    drawMap("map-container");
  }

  // draw scatter when landing on “Money or time?”
  if (
      slides[current].headline.startsWith("Money or time") &&
      !document.querySelector("#scatter-slide svg")
  ) {
    drawScatter("scatter-slide");
  }
}

// Activate the saved (or first) slide
elems[current].classList.add("active");

// ← / → arrow keys
document.addEventListener("keydown", (e) => {
  if (e.key === "ArrowRight") navigate(1);
  else if (e.key === "ArrowLeft") navigate(-1);
});
</file>

<file path="src/style.css">
/*───────────────────────────────────────────────────────────────
  OECD Better Life Index 2024 ‑ Global Styles
────────────────────────────────────────────────────────────────*/

/* 1 ▸ LOCAL VARIABLE FONTS (TTF)
   ───────────────────────────────*/
@font-face {
    font-family: "Raleway";
    font-style: normal;
    font-weight: 100 900;
    font-display: swap;
    src: url("../fonts/Raleway-VariableFont_wght.ttf") format("truetype");
}
@font-face {
    font-family: "Raleway";
    font-style: italic;
    font-weight: 100 900;
    font-display: swap;
    src: url("../fonts/Raleway-Italic-VariableFont_wght.ttf") format("truetype");
}

/* 2 ▸ ROOT & RESET
   ───────────────────────────────*/
:root {
    --color-gray-dark: #444;
    --color-primary:    #005B96;
    --color-white:      #fff;
}
* { box-sizing: border-box; }
html, body {
    margin: 0;
    padding: 0;
    font-family: "Raleway", sans-serif;
    background: var(--color-white);
    color: var(--color-gray-dark);
}

/* 3 ▸ CAROUSEL LAYOUT (If applicable, for a storytelling page perhaps)
   ───────────────────────────────*/
.carousel {
    width: 100%;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
}
.slide-container {
    width: 100%;
    max-width: 1000px; /* Or dashboard max-width if used for dashboard sections */
}

/* 4 ▸ SLIDES (If applicable)
   ───────────────────────────────*/
.slide {
    display: none;
    flex-direction: column;
    gap: 0.75rem;                                   /* base rhythm everywhere */
}
.slide.active { display: flex; }

/* Headline & body copy */
.headline {
    font-size: 2.5rem;
    font-weight: 900;
    margin: 0 0 0.335em 0;                          /* paragraph gap halved */
}
.description {
    font-size: 1rem;
    line-height: 1.5;
}

/* Doubling ONLY subtitle → headline spacing on first slide (If applicable) */
.slide:first-child .headline { margin-top: 0.75rem; }  /* + 0.75 rem → 1.5 rem total */

/* Responsive type */
@media (max-width: 600px) {
    .headline    { font-size: 1.75rem; }
    .description { font-size: 0.9rem;  }
}

/* 5 ▸ FIRST‑SLIDE BRANDING (If applicable)
   ───────────────────────────────*/
.slide .logo {
    width: clamp(180px, 25vw, 240px);
    align-self: flex-start;
}
.slide .subtitle {
    font-size: clamp(2.8rem, 6.5vw, 4.2rem);
    font-weight: 900;
    line-height: 1.05;
    margin: 0.6rem 0 0;                             /* space below logo */
    text-align: left;
    color: var(--color-gray-dark);
}

/* 6 ▸ IMAGES (If applicable)
   ───────────────────────────────*/
.images {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}
.images img {
    width: calc(50% - 0.5rem);
    border-radius: 0.5rem;
    object-fit: cover;
}
@media (max-width: 600px) { .images img { width: 100%; } }

/* 7 ▸ MAP CONTAINER (If applicable)
   ───────────────────────────────*/
#map-container {
    width: 100%;
    aspect-ratio: 16 / 9; /* More responsive */
    margin: 1rem 0;      /* Kept from file 1, adjust as needed */
}

/* 8 ▸ NAVIGATION CONTROLS
   ───────────────────────────────*/
.nav-controls {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
}
.nav-btn {
    background: none;
    border: 1px solid var(--color-gray-dark);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
    transition: background .2s, color .2s;
}
.nav-btn:hover {
    background: var(--color-primary);
    color: var(--color-white);
}
.slide:first-child .prev { visibility: hidden; }  /* hide “Prev” on slide 0 (If applicable) */

/* 9 ▸ TOOLTIPS
   ───────────────────────────────*/
/* Map Tooltip */
#map-tooltip {
    position: absolute;
    pointer-events: none;
    background: #fff; /* From file 2, more explicit */
    border: 1px solid #ccc;
    padding: 0.5rem; /* From file 2 */
    font-size: 0.85rem; /* From file 2 */
    border-radius: 4px;
    box-shadow: 0 2px 6px rgba(0,0,0,.15); /* From file 2 */
    z-index: 1000;
    white-space: nowrap; /* Ensure it doesn't wrap, common for tooltips */
}

/* General Scatter Tooltip from V1 style (used by some scatter plots if not .scatter-tooltip-external) */
.scatter-tip {
    background: rgba(255, 255, 255, 0.95);
    padding: 6px 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 11px;
    position: absolute;
    pointer-events: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    white-space: nowrap;
    z-index: 1000; /* Ensure it's above other elements */
}

/* Tooltip for story scatter (If applicable, could be a specific variant) */
.scatter-tooltip-story {
    font-family: Raleway, sans-serif; /* Explicit font for this one if needed */
    /* Other styles could be inherited from .scatter-tip or defined here */
}

/* The .scatter-tooltip-external is styled inline in the JS for the main dashboard scatter plot */


/* ── DASHBOARD SPECIFIC STYLES ────────────────────────────────── */
.dashboard-container {
    max-width: 1000px; /* Example, adjust as needed */
    margin: 2rem auto;
    padding: 1rem;
}

/* Control Panel for Dashboard */
.control-panel {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem; /* Space between control groups */
    margin-bottom: 1.5rem; /* Space below the whole panel */
    padding: 10px;
    background-color: #f0f0f0; /* Light background for the panel */
    border-radius: 4px;
    border: 1px solid #ddd;
}
.control-panel > div { /* Direct children of control-panel (individual control groups) */
    display: flex;
    flex-direction: column; /* Stack label and select/input */
    gap: 0.25rem;
}

/* Styles for specific control groups if needed (or use classes on the divs in HTML) */
.scatter-plot-controls,
.bar-chart-controls { /* Re-using existing HTML classes for consistency */
    /* These are already styled inline in the HTML, but you could centralize here */
    /* Example: */
    /* margin-bottom: 20px; */
    /* padding: 10px; */
    /* background-color: #f0f0f0; */
    /* border-radius: 4px; */
    /* border: 1px solid #ddd; */
}

.control-panel label {
    display: block; /* Make label take full width of its container */
    margin-bottom: 0.25rem;
    font-size: 0.9rem;
    font-weight: 600;
}
.control-panel select,
.control-panel input[type="checkbox"] {
    font-size: 0.9rem; /* Slightly smaller font for controls */
    padding: 0.25rem 0.4rem;
    border: 1px solid #ccc;
    border-radius: 3px;
}
.control-panel input[type="checkbox"] {
    padding: 0; /* Remove default padding for checkboxes */
    margin-right: 0.3em;
    vertical-align: middle;
}
.control-panel label[for*="checkbox"] { /* Labels associated with checkboxes */
    font-weight: normal;
    vertical-align: middle;
}


/* ── Bar Chart Section Specifics ──────────────────────────────── */
#bar-chart {
    width: 100%;
    min-height: 400px; /* Ensure it has some height, can be overridden by JS if needed */
    /* height: 500px; was in one of the files, min-height is more flexible */
    margin-top: 0.5rem;
}

/* Ensure chart SVGs are responsive within their containers */
#chart svg,
#scatter-plot-container svg,
#bar-chart svg {
    display: block; /* Removes extra space below SVG */
    width: 100%;
    height: auto; /* Maintain aspect ratio defined in JS viewBox or width/height */
    max-width: 100%; /* Ensure it doesn't overflow container */
}

/* Adjustments for axis text in D3 charts if it gets cut off or overlaps */
.axis text {
    font-size: 10px; /* Or adjust as needed */
}
.axis path,
.axis line {
    fill: none;
    stroke: #888; /* Lighter axis lines */
    shape-rendering: crispEdges;
}


@import url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;600&display=swap');

body {
  font-family: 'Raleway', sans-serif;
}

/* Controls */
#controls {
  width: 100%;
  padding: 8px;
  background: #fff;
  border-bottom: 1px solid #ccc;
}

/* Country widget */
#country-widget {
  font-family: 'Raleway', sans-serif;
  margin: 8px 0;
  padding: 10px;
  background: #f9f9f9;
  border: 1px solid #ddd;
}
.widget-header {
  display: flex;
  align-items: center;
  gap: 8px;
}
.widget-header .flag {
  font-size: 1.5em;
}
.widget-header .country-name {
  font-weight: 600;
  font-size: 1.2em;
}
.widget-header .pop {
  margin-left: auto;
  color: #555;
}
.widget-metrics {
  margin-top: 8px;
  list-style: none;
  padding: 0;
}
.widget-metrics li {
  font-size: 1em;
  margin-bottom: 4px;
}
.widget-metrics .ls-value {
  font-weight: 600;
  color: inherit; /* will pick up inline style */
}

/* Tooltip */
#tooltip {
  position: absolute;
  pointer-events: none;
  background: rgba(255,255,255,0.95);
  border: 1px solid #999;
  padding: 8px;
  border-radius: 4px;
  font-family: 'Raleway', sans-serif;
  font-size: 0.9em;
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  z-index: 10;
}
.tooltip-header {
  display: flex;
  align-items: center;
  gap: 6px;
  margin-bottom: 4px;
}
.tooltip-header .flag {
  font-size: 1.2em;
}
.tooltip-header .name {
  font-weight: 600;
}
.tooltip-header .pop {
  margin-left: auto;
  font-size: 0.85em;
  color: #555;
}
.tooltip-metric {
  margin-bottom: 6px;
}
.tooltip-metric .ls-value {
  font-weight: 600;
  /* inline color is set by JS via style attribute */
}
.tooltip-chart {
  display: block;
  margin: 0 auto;
}


/* Ensure the tooltip can grow and wrap text */
#tooltip {
  position: absolute;
  pointer-events: none;
  background: rgba(255, 255, 255, 0.97);
  border: 1px solid #999;
  padding: 30px;
  border-radius: 4px;
  font-family: 'Raleway', sans-serif;
  font-size: 0.95em;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  max-width: 240px;        /* allow wider tooltips */
  white-space: normal;     /* wrap long lines */
  z-index: 1000;
}

/* Give a bit more breathing room inside */
.tooltip-header {
  margin-bottom: 8px;
}
.tooltip-metric {
  margin-bottom: 8px;
}

/* Make the radar-chart container flex-center so it’s always visible */
.tooltip-chart {
  justify-content: center;
  align-items: center;
  margin-bottom: 6px;
}

/* Legend below chart */
.tooltip-legend {
  display: flex;
  justify-content: center;
  gap: 12px;
  margin-top: 6px;
}
.legend-item {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.85em;
  color: #333;
}
.legend-color {
  width: 12px;
  height: 12px;
  border-radius: 2px;
  display: inline-block;
}

/* hide bullet points */
.tooltip-chart ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

/* Prevent any overflow hiding */
.tooltip-chart svg {
  overflow: visible;
}
</file>

</files>
